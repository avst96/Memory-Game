@page
@model MemoryGameAsp.net.Pages.GameModel
@{
}
<div class="container border border-2 p-4 mt-5 col-lg-8">

    <div class="row border border-1 d-flex align-items-center text-info">
        <div class="col-3 ps-0 h-100">
            <button class="btn btn-primary h-100 custom-text-nowrap mb-2 mb-sm-0" id="btnStart">Start Game</button>
        </div>
        <div class="col flex-grow-1 ">
            <input class="form-check-input bg-info my-radio" type="radio" name="playerOption" id="multiPlayer" value="2 Player" autocomplete="off" checked />
            <label class="form-check-label me-2" for="multiPlayer">2 Player</label>
            <input class="form-check-input bg-info my-radio" type="radio" name="playerOption" id="solo" value="Solo" autocomplete="off" />
            <label class="form-check-label" for="solo">Solo</label>
        </div>

        <div class="col-auto border-1 border-end border-start">
            <label class="me-2">Player 1 Sets:</label>
            <label id="player1Sets">0</label>
        </div>
        <div class="col-auto">
            <label class="me-2" id="player2name">Player 2 Sets:</label>
            <label id="player2Sets">0</label>
        </div>
    </div>

    <div class="row border border-1 border-top-0 p-1 text-center fw-bold">
        <label class="col-auto border-end border-1" id="gameType">2 Player</label>
        <label class="col flex-grow-1" id="gameMsg">Press Start to Start Game</label>
    </div>

    <div class="row">
        <table class="table-responsive">
            <tr>
                <td>
                    <button class="mycard" id="c1"></button>
                </td>
                <td>
                    <button class="mycard" id="c2"></button>
                </td>
                <td>
                    <button class="mycard" id="c3"></button>
                </td>
                <td>
                    <button class="mycard" id="c4"></button>
                </td>
                <td>
                    <button class="mycard" id="c5"></button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="mycard" id="c6"></button>
                </td>
                <td>
                    <button class="mycard" id="c7"></button>
                </td>
                <td>
                    <button class="mycard" id="c8"></button>
                </td>
                <td>
                    <button class="mycard" id="c9"></button>
                </td>
                <td>
                    <button class="mycard" id="c10"></button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="mycard" id="c11"></button>
                </td>
                <td>
                    <button class="mycard" id="c12"></button>
                </td>
                <td>
                    <button class="mycard" id="c13"></button>
                </td>
                <td>
                    <button class="mycard" id="c14"></button>
                </td>
                <td>
                    <button class="mycard" id="c15"></button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="mycard" id="c16"></button>
                </td>
                <td>
                    <button class="mycard" id="c17"></button>
                </td>
                <td>
                    <button class="mycard" id="c18"></button>
                </td>
                <td>
                    <button class="mycard" id="c19"></button>
                </td>
                <td>
                    <button class="mycard" id="c20"></button>
                </td>
            </tr>
        </table>
    </div>

</div>


<script>
    const startBtn = document.getElementById("btnStart");
    const msg = document.getElementById("gameMsg");
    const playerModeMsg = document.getElementById("gameType");
    const playerOptions = document.querySelectorAll(".my-radio");
    const rbMulti = document.getElementById('multiPlayer');
    const rbSolo = document.getElementById('solo');
    const currentTurnMsg = ["Player 1's Turn", "Player 2's Turn", "Computer's Turn", "Player 1 Won!", "Player 2 Won!", "Tie", "Computer Won!"];
    const prevPickedCards = [];

    //Function
    const setTurnMsg = () => msg.innerHTML = currentTurnMsg[currentTurn];

    let gameStatus = 0;
    let isGameSolo = false;
    let allCards = document.querySelectorAll('.mycard');
    let currentTurn = 0;
    let player1Score = 0;
    let player2Score = 0;
    let match1;
    let match2;

    startBtn.addEventListener('click', startGame);
    playerOptions.forEach(o => o.addEventListener('change', gameTypeMsgs));
    allCards.forEach(c => c.addEventListener('click', doMove));

    function startGame() {

        // If in middle of game, reset game
        if (!gameStatus) {
            shuffleCards();
            isGameSolo = rbSolo.checked;
            currentTurn = 0;
        }
        prevPickedCards.length = 0;
        msg.classList.remove('bg-success');
        setTurnMsg();
        allCards.forEach(c => c.classList.remove('picked', 'claimed'));
        player1Score = 0;
        player2Score = 0;
        setGameMsgs();
        gameStatus == 1 ? gameStatus = 0 : gameStatus = 1;
    }



    function doMove(event) {
        let card = event.target;
        if (!gameStatus || card.classList.contains('picked') || document.querySelectorAll('.picked').length == 2) { return; }

        card.classList.add('picked');
        if (isGameSolo && !prevPickedCards.includes(card)) { prevPickedCards.push(card); }

        if (document.querySelectorAll('.picked').length == 2) {
            setTimeout(() => checkMatch(), 2000);
        }
    }

    function checkMatch() {
        let pickedCards = document.querySelectorAll('.picked');
        if (pickedCards[0].innerHTML === pickedCards[1].innerHTML) {
            currentTurn === 0 ? player1Score++ : player2Score++;
            document.getElementById('player1Sets').innerHTML = player1Score;
            document.getElementById('player2Sets').innerHTML = player2Score;
            pickedCards.forEach(c => {
                c.classList.add('claimed');
                prevPickedCards.splice(prevPickedCards.indexOf(c), 1);
            });
        }
        pickedCards.forEach(c => c.classList.remove('picked'));
        setGameStatusAndMsg();
    }

    function setGameStatusAndMsg() {
        if (document.querySelectorAll('.claimed').length === 20) {
            gameStatus = 0;
            if (player1Score === player2Score) { currentTurn = 5; }
            else { currentTurn = player1Score > player2Score ? 3 : isGameSolo ? 6 : 4; }
            msg.classList.add('bg-success');
            playerOptions.forEach(o => o.removeAttribute('disabled'));
        };
        if (gameStatus) { currentTurn = currentTurn == 1 || currentTurn == 2 ? 0 : isGameSolo ? 2 : 1; };
        setTurnMsg();
        if (currentTurn === 2) { doComputerMove(); }
    }


    function doComputerMove() {
        if (gameStatus) {
            if (pickedCardsMatch()) {
                match1.click();
                const date = Date.now();
                while (Date.now() - date < 2000) { };
                match2.click();
            }
            else {
                //!!pick random card
                // check that it doesn't match any card in picked cards
                // if yes pick
                // if not pick other random in list

            }
        }

        //first check if any picked cards match

    }

    function pickedCardsMatch() {
        let pickedCount = prevPickedCards.length;
        if (pickedCount > 1) {
            for (let i = 0; i < pickedCount; i++) {
                for (let j = i + 1; j < pickedCount; j++) {
                    if (prevPickedCards[i].innerHTML === prevPickedCards[j].innerHTML) {
                        match1 = prevPickedCards[i];
                        match2 = prevPickedCards[j];
                        return true;
                    }
                }
            }
        }
        return false;
    }

    function shuffleCards() {
        let cards = [];
        cards = [...document.querySelectorAll('.mycard')];
        let cardPairs = [];
        while (cards.length > 1) {
            let i = Math.floor(Math.random() * (cards.length));
            let j = Math.floor(Math.random() * (cards.length));
            while (i === j) {
                j = Math.floor(Math.random() * (cards.length));
            }

            cardPairs.push([cards[i], cards[j]]);
            cards.splice(i, 1);
            if (i < j) { j-- };
            cards.splice(j, 1);
        }
        for (let k = 0; k < cardPairs.length; k++) {
            cardPairs[k][0].innerHTML = String.fromCharCode(73 + k);
            cardPairs[k][1].innerHTML = String.fromCharCode(73 + k);
        }
    }


    function setGameMsgs() {
        if (gameStatus) {
            startBtn.innerHTML = "Start Game";
            msg.innerHTML = "Press Start to Start Game";
            playerOptions.forEach(o => o.removeAttribute('disabled'));
            msg.classList.remove('text-warning');
            msg.classList.remove('bg-success');
        }
        else {
            startBtn.innerHTML = "Restart Game";
            playerOptions.forEach(o => o.setAttribute('disabled', true));
            msg.classList.add('text-warning');
            setTurnMsg();
        }
    }

    function gameTypeMsgs(event) {
        document.getElementById("gameType").innerHTML = event.target.value;
        document.getElementById("player2name").innerHTML = rbSolo.checked ? "Computer Sets:" : "Player 2 Sets:";
    }
</script>